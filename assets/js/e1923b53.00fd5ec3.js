"use strict";(self.webpackChunkcanine_docs=self.webpackChunkcanine_docs||[]).push([[1947],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=d(t),u=a,b=f["".concat(c,".").concat(u)]||f[u]||p[u]||o;return t?r.createElement(b,i(i({ref:n},l),{},{components:t})):r.createElement(b,i({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},78:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:3},i="Joining Testnet",s={unversionedId:"nodes/nodes/testnet",id:"nodes/nodes/testnet",title:"Joining Testnet",description:"After installing canined. You can join the testnet by following these steps:",source:"@site/docs/nodes/nodes/3_testnet.md",sourceDirName:"nodes/nodes",slug:"/nodes/nodes/testnet",permalink:"/docs/nodes/nodes/testnet",draft:!1,editUrl:"https://github.com/JackalLabs/canine-docs/blob/master/docs/nodes/nodes/3_testnet.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installing Canined",permalink:"/docs/nodes/nodes/installation"},next:{title:"Joining Mainnet",permalink:"/docs/nodes/nodes/mainnet"}},c={},d=[],l={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"joining-testnet"},"Joining Testnet"),(0,a.kt)("p",null,"After installing ",(0,a.kt)("inlineCode",{parentName:"p"},"canined"),". You can join the testnet by following these steps:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"canined init <alias> --chain-id=<chain-id>\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"chain-id")," for testnet is currently ",(0,a.kt)("inlineCode",{parentName:"p"},"canine-1"),".")),(0,a.kt)("p",null,"Then we want to replace our generated genesis file with the one used to start the network. We also need to set our peers and seeds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'wget -O ~/.canine/config/genesis.json https://raw.githubusercontent.com/JackalLabs/woof/master/genesis/woof-final.json\n\nexport SEEDS="052c498dd1cc603b4d32f772035b6a8ca902def3@23.88.73.211:26656,0bdeaaa237b41e3b964a027a110c6ab5bf561177@209.34.206.38:26656,bf7ee27a24e7d5f45653206fbbda8c4b716b74b1@89.58.38.59:26656,9eecc498dd2542c862f5bfb84ed7d2e1e3d922ab@34.201.48.14:26656,bf62b185eef3c185f8ebf81d5cf54bdc064b21d8@85.10.216.157:26656,43e800018a5b52ba119a5410ff45cbeb63182cc8@207.244.127.5:26656,942087a9665e8235f8037d0b9d2a3f8a8c3d562b@104.207.138.181:26656,9d0094606fe8748f1c06b494f7c0cbbd44808ec6@131.153.59.6:26656,6071fe2fc7e4f49caa4b1fd1cfe19007152312e0@34.76.87.33:26656,3f58d7c35ad55ef6cea94f7aa2ffe79df1c01768@78.107.253.133:26656,46cb18ca32ad7329cb82a10316087794ef12150f@185.107.57.74:26656"\nsed -i.bak -e "s/^seeds *=.*/seeds = \\"$SEEDS\\"/" ~/.canine/config/config.toml\n')),(0,a.kt)("p",null,"As a validator, you'll need to set a minimum gas price like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'GAS="0.002ujkl"\nsed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \\"$GAS\\"/" $HOME/.canine/config/app.toml\n')))}p.isMDXComponent=!0}}]);